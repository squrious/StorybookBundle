{"version":3,"sources":["../../src/builders/webpack-builder.ts","../../node_modules/ts-dedent/src/index.ts"],"names":["i","getConfig","bail","start","build","corePresets","overridePresets"],"mappings":";AAAA,SAAS,6BAA6B;AAEtC,YAAY,iBAAiB;;;ACFvB,SAAU,OACd,OAAoC;AACpC,MAAA,SAAA,CAAA;WAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAAoB;AAApB,WAAA,KAAA,CAAA,IAAA,UAAA,EAAA;;AAEA,MAAI,UAAU,MAAM,KAAK,OAAO,UAAU,WAAW,CAAC,KAAK,IAAI,KAAK;AAGpE,UAAQ,QAAQ,SAAS,CAAC,IAAI,QAAQ,QAAQ,SAAS,CAAC,EAAE,QACxD,kBACA,EAAE;AAIJ,MAAM,gBAAgB,QAAQ,OAAO,SAAC,KAAK,KAAG;AAC5C,QAAM,UAAU,IAAI,MAAM,qBAAqB;AAC/C,QAAI,SAAS;AACX,aAAO,IAAI,OACT,QAAQ,IAAI,SAAC,OAAK;AAAA,YAAA,IAAA;AAAK,gBAAA,MAAA,KAAA,MAAM,MAAM,QAAQ,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,YAAM,QAAA,OAAA,SAAA,KAAI;MAAC,CAAA,CAAC;;AAG9D,WAAO;EACT,GAAa,CAAA,CAAE;AAGf,MAAI,cAAc,QAAQ;AACxB,QAAM,YAAU,IAAI,OAAO,YAAW,KAAK,IAAG,MAAR,MAAY,aAAa,IAAA,KAAM,GAAG;AAExE,cAAU,QAAQ,IAAI,SAAC,KAAG;AAAK,aAAA,IAAI,QAAQ,WAAS,IAAI;IAAzB,CAA0B;;AAI3D,UAAQ,CAAC,IAAI,QAAQ,CAAC,EAAE,QAAQ,UAAU,EAAE;AAG5C,MAAI,SAAS,QAAQ,CAAC;AAEtB,SAAO,QAAQ,SAAC,OAAO,GAAC;AAEtB,QAAM,eAAe,OAAO,MAAM,eAAe;AACjD,QAAM,cAAc,eAAe,aAAa,CAAC,IAAI;AACrD,QAAI,gBAAgB;AAEpB,QAAI,OAAO,UAAU,YAAY,MAAM,SAAS,IAAI,GAAG;AACrD,sBAAgB,OAAO,KAAK,EACzB,MAAM,IAAI,EACV,IAAI,SAAC,KAAKA,IAAC;AACV,eAAOA,OAAM,IAAI,MAAM,KAAG,cAAc;MAC1C,CAAC,EACA,KAAK,IAAI;;AAGd,cAAU,gBAAgB,QAAQ,IAAI,CAAC;EACzC,CAAC;AAED,SAAO;AACT;AAEA,IAAA,cAAe;;;AD/CR,IAAMC,aAAwB;AAE9B,IAAMC,QAAmB;AAEzB,IAAMC,SAAkC,OAAO,YAAY;AAC9D,QAAM,SAAS,QAAQ,QAAQ,eAAe;AAE9C,QAAM,EAAE,QAAQ,IAAI,MAAM,QAAQ,QAAQ,QAAQ,MAE/C,kBAAkB;AAErB,MAAI,CAAC,QAAQ,QAAQ;AACjB,UAAM,IAAI,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,SAKf;AAAA,EACL;AAEA,QAAM,aAAa,CAAC,oBAAoB;AAExC,MAAI,QAAQ,YAAY;AACpB,UAAM,QAAQ,CAAC,MAAM,QAAQ,QAAQ,UAAU,IAAI,CAAC,QAAQ,UAAU,IAAI,QAAQ;AAClF,eAAW,KAAK,GAAG,KAAK;AAAA,EAC5B;AAEA,aAAW,QAAQ,YAAY;AAC3B,YAAQ,OAAO;AAAA,MACX;AAAA,MACA,sBAAsB;AAAA,QAClB,QAAQ,QAAQ;AAAA,QAChB,cAAc;AAAA,QACd,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,qBAAqB;AAAA,QACzB;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,SAAmB,kBAAM,OAAO;AACpC;AAEO,IAAMC,SAAoB;AAE1B,IAAMC,eAA0B;AAChC,IAAMC,mBAA8B","sourcesContent":["import { createProxyMiddleware } from 'http-proxy-middleware';\n\nimport * as baseBuilder from '@storybook/builder-webpack5';\nimport dedent from 'ts-dedent';\n\nexport type BuilderOptions = {\n    server?: string;\n    proxyPaths?: string | string[];\n};\n\nexport const getConfig = baseBuilder.getConfig;\n\nexport const bail = baseBuilder.bail;\n\nexport const start: typeof baseBuilder.start = async (options) => {\n    const isProd = options.options.configType === 'PRODUCTION';\n\n    const { symfony } = await options.options.presets.apply<{\n        symfony: BuilderOptions;\n    }>('frameworkOptions');\n\n    if (!symfony.server) {\n        throw new Error(dedent`\n        Cannot configure dev server.\n        \n        \"server\" option in \"framework.options.symfony\" is required for Storybook dev server to run.\n        Update your main.ts|js file accordingly.\n        `);\n    }\n\n    const proxyPaths = ['/_storybook/render'];\n\n    if (symfony.proxyPaths) {\n        const paths = !Array.isArray(symfony.proxyPaths) ? [symfony.proxyPaths] : symfony.proxyPaths;\n        proxyPaths.push(...paths);\n    }\n\n    for (const path of proxyPaths) {\n        options.router.use(\n            path,\n            createProxyMiddleware({\n                target: symfony.server,\n                changeOrigin: true,\n                secure: isProd,\n                headers: {\n                    'X-Storybook-Proxy': 'true',\n                },\n            })\n        );\n    }\n\n    return baseBuilder.start(options);\n};\n\nexport const build = baseBuilder.build;\n\nexport const corePresets = baseBuilder.corePresets;\nexport const overridePresets = baseBuilder.overridePresets;\n","export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n"]}