{"version":3,"sources":["../../src/symfony-api/console.ts","../../node_modules/ts-dedent/src/index.ts","../../src/symfony-api/lib/formatStackTrace.ts"],"names":["exec","dedent","templ","values","_i","strings","indentLengths","arr","str","matches","match","_a","_b","pattern_1","string","value","i","endentations","endentation","indentedValue","esm_default","formatStackTrace","trace","file","line","func","cls","type","defaultOptions","STORYBOOK_COMMAND_NAMESPACE","ConsoleError","error","stderr","message","parsedStderr","runSymfonyCommand","command","inputs","options","finalOptions","finalCommand","part","resolve","reject","stdout","setConfig","getConfig","getKernelProjectDir","getTwigComponentConfiguration","generatePreview"],"mappings":"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","sourcesContent":["import { exec, ExecException } from 'child_process';\nimport dedent from 'ts-dedent';\nimport { ApiErrorData, BundleConfiguration, SymfonyApi as BaseSymfonyApi } from './types';\nimport { formatStackTrace } from './lib/formatStackTrace';\n\ntype ApiConfig = unknown;\ntype ApiType = 'console';\nexport interface SymfonyApi extends BaseSymfonyApi<ApiType, ApiConfig> {}\n\ntype CommandOptions = {\n    /**\n     * Path to the PHP binary used to execute the command.\n     */\n    php?: string;\n\n    /**\n     * Path to the Symfony Console entrypoint.\n     */\n    script?: string;\n};\n\nconst defaultOptions: CommandOptions = {\n    php: 'php',\n    script: 'bin/console',\n};\n\nconst STORYBOOK_COMMAND_NAMESPACE = 'storybook:api';\n\nclass ConsoleError extends Error {\n    constructor(error: ExecException, stderr: string) {\n        let message = dedent`\n                Symfony console failed with exit status ${error.code}.\n                CMD: ${error.cmd}\n                `;\n\n        try {\n            const parsedStderr = JSON.parse(stderr) as ApiErrorData;\n\n            message += dedent`\\n\n            Error: ${parsedStderr.error}\n            `;\n            if (parsedStderr.trace !== undefined) {\n                message += dedent`\\n\n                Trace:\n                ${formatStackTrace(parsedStderr.trace)}\n                `;\n            }\n        } catch (err) {\n            message += dedent`\\n\n            Error output: ${stderr}                    \n            `;\n        }\n        super(message);\n    }\n}\n\n/**\n * Run a Symfony command with JSON formatted output and get the result as a JS object.\n */\nexport const runSymfonyCommand = async <T = any>(\n    command: string,\n    inputs: string[] = [],\n    options: CommandOptions = {}\n): Promise<T> => {\n    const finalOptions = {\n        ...defaultOptions,\n        ...options,\n    };\n\n    const finalCommand = [finalOptions.php, finalOptions.script, `${STORYBOOK_COMMAND_NAMESPACE}:${command}`]\n        .concat(...inputs)\n        .map((part) => `'${part}'`)\n        .join(' ');\n\n    return new Promise<T>((resolve, reject) => {\n        exec(finalCommand, (error, stdout, stderr) => {\n            if (error) {\n                reject(new ConsoleError(error, stderr));\n            }\n\n            try {\n                resolve(JSON.parse(stdout) as T);\n            } catch (err) {\n                reject(\n                    new Error(dedent`\n                Failed to process JSON output for Symfony command.\n                CMD: ${finalCommand}\n                Output: ${stdout}\n                `)\n                );\n            }\n        });\n    });\n};\n\nexport const setConfig: SymfonyApi['setConfig'] = () => {};\nexport const getConfig: SymfonyApi['getConfig'] = () => ({});\n\nexport const getKernelProjectDir: SymfonyApi['getKernelProjectDir'] = async () => {\n    return runSymfonyCommand<string>('get-container-parameter', ['kernel.project_dir']);\n};\n\nexport const getTwigComponentConfiguration: SymfonyApi['getTwigComponentConfiguration'] = async () => {\n    return (await runSymfonyCommand<BundleConfiguration>('bundle-config', ['twig_component']))['twig_component'];\n};\n\nexport const generatePreview: SymfonyApi['generatePreview'] = async () => {\n    return runSymfonyCommand<string>('generate-preview');\n};\n","export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n","import { StackTrace } from '../types';\n\nexport const formatStackTrace = (trace: StackTrace) => {\n    return trace\n        .map(\n            ({ file, line, function: func, class: cls, type }) =>\n                `at ${cls || ''}${type || ''}${func}() (${file}:${line})`\n        )\n        .join('\\n');\n};\n"]}